// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: eval/v1/eval.proto

package evalv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tincans-ai/evalite/gen/eval/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EvaluationServiceName is the fully-qualified name of the EvaluationService service.
	EvaluationServiceName = "eval.v1.EvaluationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EvaluationServiceEvaluateProcedure is the fully-qualified name of the EvaluationService's
	// Evaluate RPC.
	EvaluationServiceEvaluateProcedure = "/eval.v1.EvaluationService/Evaluate"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	evaluationServiceServiceDescriptor        = v1.File_eval_v1_eval_proto.Services().ByName("EvaluationService")
	evaluationServiceEvaluateMethodDescriptor = evaluationServiceServiceDescriptor.Methods().ByName("Evaluate")
)

// EvaluationServiceClient is a client for the eval.v1.EvaluationService service.
type EvaluationServiceClient interface {
	Evaluate(context.Context, *connect.Request[v1.EvaluationRequest]) (*connect.Response[v1.EvaluationResponse], error)
}

// NewEvaluationServiceClient constructs a client for the eval.v1.EvaluationService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEvaluationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EvaluationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &evaluationServiceClient{
		evaluate: connect.NewClient[v1.EvaluationRequest, v1.EvaluationResponse](
			httpClient,
			baseURL+EvaluationServiceEvaluateProcedure,
			connect.WithSchema(evaluationServiceEvaluateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// evaluationServiceClient implements EvaluationServiceClient.
type evaluationServiceClient struct {
	evaluate *connect.Client[v1.EvaluationRequest, v1.EvaluationResponse]
}

// Evaluate calls eval.v1.EvaluationService.Evaluate.
func (c *evaluationServiceClient) Evaluate(ctx context.Context, req *connect.Request[v1.EvaluationRequest]) (*connect.Response[v1.EvaluationResponse], error) {
	return c.evaluate.CallUnary(ctx, req)
}

// EvaluationServiceHandler is an implementation of the eval.v1.EvaluationService service.
type EvaluationServiceHandler interface {
	Evaluate(context.Context, *connect.Request[v1.EvaluationRequest]) (*connect.Response[v1.EvaluationResponse], error)
}

// NewEvaluationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEvaluationServiceHandler(svc EvaluationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	evaluationServiceEvaluateHandler := connect.NewUnaryHandler(
		EvaluationServiceEvaluateProcedure,
		svc.Evaluate,
		connect.WithSchema(evaluationServiceEvaluateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/eval.v1.EvaluationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EvaluationServiceEvaluateProcedure:
			evaluationServiceEvaluateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEvaluationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEvaluationServiceHandler struct{}

func (UnimplementedEvaluationServiceHandler) Evaluate(context.Context, *connect.Request[v1.EvaluationRequest]) (*connect.Response[v1.EvaluationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eval.v1.EvaluationService.Evaluate is not implemented"))
}
