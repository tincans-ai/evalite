// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: eval/v1/eval.proto

package evalv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tincans-ai/evalite/gen/eval/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EvaluationServiceName is the fully-qualified name of the EvaluationService service.
	EvaluationServiceName = "eval.v1.EvaluationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EvaluationServiceEvaluateProcedure is the fully-qualified name of the EvaluationService's
	// Evaluate RPC.
	EvaluationServiceEvaluateProcedure = "/eval.v1.EvaluationService/Evaluate"
	// EvaluationServiceSyntheticGenerationProcedure is the fully-qualified name of the
	// EvaluationService's SyntheticGeneration RPC.
	EvaluationServiceSyntheticGenerationProcedure = "/eval.v1.EvaluationService/SyntheticGeneration"
	// EvaluationServiceCreateWorkspaceProcedure is the fully-qualified name of the EvaluationService's
	// CreateWorkspace RPC.
	EvaluationServiceCreateWorkspaceProcedure = "/eval.v1.EvaluationService/CreateWorkspace"
	// EvaluationServiceGetWorkspaceProcedure is the fully-qualified name of the EvaluationService's
	// GetWorkspace RPC.
	EvaluationServiceGetWorkspaceProcedure = "/eval.v1.EvaluationService/GetWorkspace"
	// EvaluationServiceListWorkspacesProcedure is the fully-qualified name of the EvaluationService's
	// ListWorkspaces RPC.
	EvaluationServiceListWorkspacesProcedure = "/eval.v1.EvaluationService/ListWorkspaces"
	// EvaluationServiceUpdateWorkspaceProcedure is the fully-qualified name of the EvaluationService's
	// UpdateWorkspace RPC.
	EvaluationServiceUpdateWorkspaceProcedure = "/eval.v1.EvaluationService/UpdateWorkspace"
	// EvaluationServiceGeneratePromptProcedure is the fully-qualified name of the EvaluationService's
	// GeneratePrompt RPC.
	EvaluationServiceGeneratePromptProcedure = "/eval.v1.EvaluationService/GeneratePrompt"
	// EvaluationServiceCreateTestCaseProcedure is the fully-qualified name of the EvaluationService's
	// CreateTestCase RPC.
	EvaluationServiceCreateTestCaseProcedure = "/eval.v1.EvaluationService/CreateTestCase"
	// EvaluationServiceListTestCasesProcedure is the fully-qualified name of the EvaluationService's
	// ListTestCases RPC.
	EvaluationServiceListTestCasesProcedure = "/eval.v1.EvaluationService/ListTestCases"
	// EvaluationServiceGenerateTestCaseProcedure is the fully-qualified name of the EvaluationService's
	// GenerateTestCase RPC.
	EvaluationServiceGenerateTestCaseProcedure = "/eval.v1.EvaluationService/GenerateTestCase"
	// EvaluationServiceDeleteTestCaseProcedure is the fully-qualified name of the EvaluationService's
	// DeleteTestCase RPC.
	EvaluationServiceDeleteTestCaseProcedure = "/eval.v1.EvaluationService/DeleteTestCase"
	// EvaluationServiceListModelConfigsProcedure is the fully-qualified name of the EvaluationService's
	// ListModelConfigs RPC.
	EvaluationServiceListModelConfigsProcedure = "/eval.v1.EvaluationService/ListModelConfigs"
	// EvaluationServiceGetDefaultSmallModelConfigProcedure is the fully-qualified name of the
	// EvaluationService's GetDefaultSmallModelConfig RPC.
	EvaluationServiceGetDefaultSmallModelConfigProcedure = "/eval.v1.EvaluationService/GetDefaultSmallModelConfig"
	// EvaluationServiceGetDefaultLargeModelConfigProcedure is the fully-qualified name of the
	// EvaluationService's GetDefaultLargeModelConfig RPC.
	EvaluationServiceGetDefaultLargeModelConfigProcedure = "/eval.v1.EvaluationService/GetDefaultLargeModelConfig"
	// EvaluationServiceSetDefaultSmallModelConfigProcedure is the fully-qualified name of the
	// EvaluationService's SetDefaultSmallModelConfig RPC.
	EvaluationServiceSetDefaultSmallModelConfigProcedure = "/eval.v1.EvaluationService/SetDefaultSmallModelConfig"
	// EvaluationServiceSetDefaultLargeModelConfigProcedure is the fully-qualified name of the
	// EvaluationService's SetDefaultLargeModelConfig RPC.
	EvaluationServiceSetDefaultLargeModelConfigProcedure = "/eval.v1.EvaluationService/SetDefaultLargeModelConfig"
	// EvaluationServiceCreateWorkspaceConfigProcedure is the fully-qualified name of the
	// EvaluationService's CreateWorkspaceConfig RPC.
	EvaluationServiceCreateWorkspaceConfigProcedure = "/eval.v1.EvaluationService/CreateWorkspaceConfig"
	// EvaluationServiceDeleteWorkspaceConfigProcedure is the fully-qualified name of the
	// EvaluationService's DeleteWorkspaceConfig RPC.
	EvaluationServiceDeleteWorkspaceConfigProcedure = "/eval.v1.EvaluationService/DeleteWorkspaceConfig"
	// EvaluationServiceSetWorkspaceConfigActiveProcedure is the fully-qualified name of the
	// EvaluationService's SetWorkspaceConfigActive RPC.
	EvaluationServiceSetWorkspaceConfigActiveProcedure = "/eval.v1.EvaluationService/SetWorkspaceConfigActive"
	// EvaluationServiceSetVersionActiveProcedure is the fully-qualified name of the EvaluationService's
	// SetVersionActive RPC.
	EvaluationServiceSetVersionActiveProcedure = "/eval.v1.EvaluationService/SetVersionActive"
	// EvaluationServiceSetXMLModeProcedure is the fully-qualified name of the EvaluationService's
	// SetXMLMode RPC.
	EvaluationServiceSetXMLModeProcedure = "/eval.v1.EvaluationService/SetXMLMode"
	// EvaluationServiceRateTestResultProcedure is the fully-qualified name of the EvaluationService's
	// RateTestResult RPC.
	EvaluationServiceRateTestResultProcedure = "/eval.v1.EvaluationService/RateTestResult"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	evaluationServiceServiceDescriptor                          = v1.File_eval_v1_eval_proto.Services().ByName("EvaluationService")
	evaluationServiceEvaluateMethodDescriptor                   = evaluationServiceServiceDescriptor.Methods().ByName("Evaluate")
	evaluationServiceSyntheticGenerationMethodDescriptor        = evaluationServiceServiceDescriptor.Methods().ByName("SyntheticGeneration")
	evaluationServiceCreateWorkspaceMethodDescriptor            = evaluationServiceServiceDescriptor.Methods().ByName("CreateWorkspace")
	evaluationServiceGetWorkspaceMethodDescriptor               = evaluationServiceServiceDescriptor.Methods().ByName("GetWorkspace")
	evaluationServiceListWorkspacesMethodDescriptor             = evaluationServiceServiceDescriptor.Methods().ByName("ListWorkspaces")
	evaluationServiceUpdateWorkspaceMethodDescriptor            = evaluationServiceServiceDescriptor.Methods().ByName("UpdateWorkspace")
	evaluationServiceGeneratePromptMethodDescriptor             = evaluationServiceServiceDescriptor.Methods().ByName("GeneratePrompt")
	evaluationServiceCreateTestCaseMethodDescriptor             = evaluationServiceServiceDescriptor.Methods().ByName("CreateTestCase")
	evaluationServiceListTestCasesMethodDescriptor              = evaluationServiceServiceDescriptor.Methods().ByName("ListTestCases")
	evaluationServiceGenerateTestCaseMethodDescriptor           = evaluationServiceServiceDescriptor.Methods().ByName("GenerateTestCase")
	evaluationServiceDeleteTestCaseMethodDescriptor             = evaluationServiceServiceDescriptor.Methods().ByName("DeleteTestCase")
	evaluationServiceListModelConfigsMethodDescriptor           = evaluationServiceServiceDescriptor.Methods().ByName("ListModelConfigs")
	evaluationServiceGetDefaultSmallModelConfigMethodDescriptor = evaluationServiceServiceDescriptor.Methods().ByName("GetDefaultSmallModelConfig")
	evaluationServiceGetDefaultLargeModelConfigMethodDescriptor = evaluationServiceServiceDescriptor.Methods().ByName("GetDefaultLargeModelConfig")
	evaluationServiceSetDefaultSmallModelConfigMethodDescriptor = evaluationServiceServiceDescriptor.Methods().ByName("SetDefaultSmallModelConfig")
	evaluationServiceSetDefaultLargeModelConfigMethodDescriptor = evaluationServiceServiceDescriptor.Methods().ByName("SetDefaultLargeModelConfig")
	evaluationServiceCreateWorkspaceConfigMethodDescriptor      = evaluationServiceServiceDescriptor.Methods().ByName("CreateWorkspaceConfig")
	evaluationServiceDeleteWorkspaceConfigMethodDescriptor      = evaluationServiceServiceDescriptor.Methods().ByName("DeleteWorkspaceConfig")
	evaluationServiceSetWorkspaceConfigActiveMethodDescriptor   = evaluationServiceServiceDescriptor.Methods().ByName("SetWorkspaceConfigActive")
	evaluationServiceSetVersionActiveMethodDescriptor           = evaluationServiceServiceDescriptor.Methods().ByName("SetVersionActive")
	evaluationServiceSetXMLModeMethodDescriptor                 = evaluationServiceServiceDescriptor.Methods().ByName("SetXMLMode")
	evaluationServiceRateTestResultMethodDescriptor             = evaluationServiceServiceDescriptor.Methods().ByName("RateTestResult")
)

// EvaluationServiceClient is a client for the eval.v1.EvaluationService service.
type EvaluationServiceClient interface {
	Evaluate(context.Context, *connect.Request[v1.EvaluationRequest]) (*connect.Response[v1.EvaluationResponse], error)
	SyntheticGeneration(context.Context, *connect.Request[v1.SyntheticGenerationRequest]) (*connect.Response[v1.EvaluationResponse], error)
	// Workspace operations
	CreateWorkspace(context.Context, *connect.Request[v1.CreateWorkspaceRequest]) (*connect.Response[v1.CreateWorkspaceResponse], error)
	GetWorkspace(context.Context, *connect.Request[v1.GetWorkspaceRequest]) (*connect.Response[v1.GetWorkspaceResponse], error)
	ListWorkspaces(context.Context, *connect.Request[v1.ListWorkspacesRequest]) (*connect.Response[v1.ListWorkspacesResponse], error)
	UpdateWorkspace(context.Context, *connect.Request[v1.UpdateWorkspaceRequest]) (*connect.Response[v1.UpdateWorkspaceResponse], error)
	// Prompt operations
	GeneratePrompt(context.Context, *connect.Request[v1.GeneratePromptRequest]) (*connect.Response[v1.GeneratePromptResponse], error)
	// TestCase operations
	CreateTestCase(context.Context, *connect.Request[v1.CreateTestCaseRequest]) (*connect.Response[v1.CreateTestCaseResponse], error)
	ListTestCases(context.Context, *connect.Request[v1.ListTestCasesRequest]) (*connect.Response[v1.ListTestCasesResponse], error)
	GenerateTestCase(context.Context, *connect.Request[v1.GenerateTestCaseRequest]) (*connect.Response[v1.GenerateTestCaseResponse], error)
	DeleteTestCase(context.Context, *connect.Request[v1.DeleteTestCaseRequest]) (*connect.Response[emptypb.Empty], error)
	// ModelConfig operations
	ListModelConfigs(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListModelConfigsResponse], error)
	GetDefaultSmallModelConfig(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetModelConfigResponse], error)
	GetDefaultLargeModelConfig(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetModelConfigResponse], error)
	SetDefaultSmallModelConfig(context.Context, *connect.Request[v1.SetDefaultSmallModelConfigRequest]) (*connect.Response[emptypb.Empty], error)
	SetDefaultLargeModelConfig(context.Context, *connect.Request[v1.SetDefaultLargeModelConfigRequest]) (*connect.Response[emptypb.Empty], error)
	CreateWorkspaceConfig(context.Context, *connect.Request[v1.CreateWorkspaceConfigRequest]) (*connect.Response[v1.CreateWorkspaceConfigResponse], error)
	DeleteWorkspaceConfig(context.Context, *connect.Request[v1.DeleteWorkspaceConfigRequest]) (*connect.Response[emptypb.Empty], error)
	SetWorkspaceConfigActive(context.Context, *connect.Request[v1.SetWorkspaceConfigActiveRequest]) (*connect.Response[emptypb.Empty], error)
	SetVersionActive(context.Context, *connect.Request[v1.SetVersionActiveRequest]) (*connect.Response[emptypb.Empty], error)
	SetXMLMode(context.Context, *connect.Request[v1.SetXMLModeRequest]) (*connect.Response[emptypb.Empty], error)
	RateTestResult(context.Context, *connect.Request[v1.RateTestResultRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewEvaluationServiceClient constructs a client for the eval.v1.EvaluationService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEvaluationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EvaluationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &evaluationServiceClient{
		evaluate: connect.NewClient[v1.EvaluationRequest, v1.EvaluationResponse](
			httpClient,
			baseURL+EvaluationServiceEvaluateProcedure,
			connect.WithSchema(evaluationServiceEvaluateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		syntheticGeneration: connect.NewClient[v1.SyntheticGenerationRequest, v1.EvaluationResponse](
			httpClient,
			baseURL+EvaluationServiceSyntheticGenerationProcedure,
			connect.WithSchema(evaluationServiceSyntheticGenerationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createWorkspace: connect.NewClient[v1.CreateWorkspaceRequest, v1.CreateWorkspaceResponse](
			httpClient,
			baseURL+EvaluationServiceCreateWorkspaceProcedure,
			connect.WithSchema(evaluationServiceCreateWorkspaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getWorkspace: connect.NewClient[v1.GetWorkspaceRequest, v1.GetWorkspaceResponse](
			httpClient,
			baseURL+EvaluationServiceGetWorkspaceProcedure,
			connect.WithSchema(evaluationServiceGetWorkspaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listWorkspaces: connect.NewClient[v1.ListWorkspacesRequest, v1.ListWorkspacesResponse](
			httpClient,
			baseURL+EvaluationServiceListWorkspacesProcedure,
			connect.WithSchema(evaluationServiceListWorkspacesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateWorkspace: connect.NewClient[v1.UpdateWorkspaceRequest, v1.UpdateWorkspaceResponse](
			httpClient,
			baseURL+EvaluationServiceUpdateWorkspaceProcedure,
			connect.WithSchema(evaluationServiceUpdateWorkspaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		generatePrompt: connect.NewClient[v1.GeneratePromptRequest, v1.GeneratePromptResponse](
			httpClient,
			baseURL+EvaluationServiceGeneratePromptProcedure,
			connect.WithSchema(evaluationServiceGeneratePromptMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createTestCase: connect.NewClient[v1.CreateTestCaseRequest, v1.CreateTestCaseResponse](
			httpClient,
			baseURL+EvaluationServiceCreateTestCaseProcedure,
			connect.WithSchema(evaluationServiceCreateTestCaseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTestCases: connect.NewClient[v1.ListTestCasesRequest, v1.ListTestCasesResponse](
			httpClient,
			baseURL+EvaluationServiceListTestCasesProcedure,
			connect.WithSchema(evaluationServiceListTestCasesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		generateTestCase: connect.NewClient[v1.GenerateTestCaseRequest, v1.GenerateTestCaseResponse](
			httpClient,
			baseURL+EvaluationServiceGenerateTestCaseProcedure,
			connect.WithSchema(evaluationServiceGenerateTestCaseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteTestCase: connect.NewClient[v1.DeleteTestCaseRequest, emptypb.Empty](
			httpClient,
			baseURL+EvaluationServiceDeleteTestCaseProcedure,
			connect.WithSchema(evaluationServiceDeleteTestCaseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listModelConfigs: connect.NewClient[emptypb.Empty, v1.ListModelConfigsResponse](
			httpClient,
			baseURL+EvaluationServiceListModelConfigsProcedure,
			connect.WithSchema(evaluationServiceListModelConfigsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDefaultSmallModelConfig: connect.NewClient[emptypb.Empty, v1.GetModelConfigResponse](
			httpClient,
			baseURL+EvaluationServiceGetDefaultSmallModelConfigProcedure,
			connect.WithSchema(evaluationServiceGetDefaultSmallModelConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDefaultLargeModelConfig: connect.NewClient[emptypb.Empty, v1.GetModelConfigResponse](
			httpClient,
			baseURL+EvaluationServiceGetDefaultLargeModelConfigProcedure,
			connect.WithSchema(evaluationServiceGetDefaultLargeModelConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setDefaultSmallModelConfig: connect.NewClient[v1.SetDefaultSmallModelConfigRequest, emptypb.Empty](
			httpClient,
			baseURL+EvaluationServiceSetDefaultSmallModelConfigProcedure,
			connect.WithSchema(evaluationServiceSetDefaultSmallModelConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setDefaultLargeModelConfig: connect.NewClient[v1.SetDefaultLargeModelConfigRequest, emptypb.Empty](
			httpClient,
			baseURL+EvaluationServiceSetDefaultLargeModelConfigProcedure,
			connect.WithSchema(evaluationServiceSetDefaultLargeModelConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createWorkspaceConfig: connect.NewClient[v1.CreateWorkspaceConfigRequest, v1.CreateWorkspaceConfigResponse](
			httpClient,
			baseURL+EvaluationServiceCreateWorkspaceConfigProcedure,
			connect.WithSchema(evaluationServiceCreateWorkspaceConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteWorkspaceConfig: connect.NewClient[v1.DeleteWorkspaceConfigRequest, emptypb.Empty](
			httpClient,
			baseURL+EvaluationServiceDeleteWorkspaceConfigProcedure,
			connect.WithSchema(evaluationServiceDeleteWorkspaceConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setWorkspaceConfigActive: connect.NewClient[v1.SetWorkspaceConfigActiveRequest, emptypb.Empty](
			httpClient,
			baseURL+EvaluationServiceSetWorkspaceConfigActiveProcedure,
			connect.WithSchema(evaluationServiceSetWorkspaceConfigActiveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setVersionActive: connect.NewClient[v1.SetVersionActiveRequest, emptypb.Empty](
			httpClient,
			baseURL+EvaluationServiceSetVersionActiveProcedure,
			connect.WithSchema(evaluationServiceSetVersionActiveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setXMLMode: connect.NewClient[v1.SetXMLModeRequest, emptypb.Empty](
			httpClient,
			baseURL+EvaluationServiceSetXMLModeProcedure,
			connect.WithSchema(evaluationServiceSetXMLModeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		rateTestResult: connect.NewClient[v1.RateTestResultRequest, emptypb.Empty](
			httpClient,
			baseURL+EvaluationServiceRateTestResultProcedure,
			connect.WithSchema(evaluationServiceRateTestResultMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// evaluationServiceClient implements EvaluationServiceClient.
type evaluationServiceClient struct {
	evaluate                   *connect.Client[v1.EvaluationRequest, v1.EvaluationResponse]
	syntheticGeneration        *connect.Client[v1.SyntheticGenerationRequest, v1.EvaluationResponse]
	createWorkspace            *connect.Client[v1.CreateWorkspaceRequest, v1.CreateWorkspaceResponse]
	getWorkspace               *connect.Client[v1.GetWorkspaceRequest, v1.GetWorkspaceResponse]
	listWorkspaces             *connect.Client[v1.ListWorkspacesRequest, v1.ListWorkspacesResponse]
	updateWorkspace            *connect.Client[v1.UpdateWorkspaceRequest, v1.UpdateWorkspaceResponse]
	generatePrompt             *connect.Client[v1.GeneratePromptRequest, v1.GeneratePromptResponse]
	createTestCase             *connect.Client[v1.CreateTestCaseRequest, v1.CreateTestCaseResponse]
	listTestCases              *connect.Client[v1.ListTestCasesRequest, v1.ListTestCasesResponse]
	generateTestCase           *connect.Client[v1.GenerateTestCaseRequest, v1.GenerateTestCaseResponse]
	deleteTestCase             *connect.Client[v1.DeleteTestCaseRequest, emptypb.Empty]
	listModelConfigs           *connect.Client[emptypb.Empty, v1.ListModelConfigsResponse]
	getDefaultSmallModelConfig *connect.Client[emptypb.Empty, v1.GetModelConfigResponse]
	getDefaultLargeModelConfig *connect.Client[emptypb.Empty, v1.GetModelConfigResponse]
	setDefaultSmallModelConfig *connect.Client[v1.SetDefaultSmallModelConfigRequest, emptypb.Empty]
	setDefaultLargeModelConfig *connect.Client[v1.SetDefaultLargeModelConfigRequest, emptypb.Empty]
	createWorkspaceConfig      *connect.Client[v1.CreateWorkspaceConfigRequest, v1.CreateWorkspaceConfigResponse]
	deleteWorkspaceConfig      *connect.Client[v1.DeleteWorkspaceConfigRequest, emptypb.Empty]
	setWorkspaceConfigActive   *connect.Client[v1.SetWorkspaceConfigActiveRequest, emptypb.Empty]
	setVersionActive           *connect.Client[v1.SetVersionActiveRequest, emptypb.Empty]
	setXMLMode                 *connect.Client[v1.SetXMLModeRequest, emptypb.Empty]
	rateTestResult             *connect.Client[v1.RateTestResultRequest, emptypb.Empty]
}

// Evaluate calls eval.v1.EvaluationService.Evaluate.
func (c *evaluationServiceClient) Evaluate(ctx context.Context, req *connect.Request[v1.EvaluationRequest]) (*connect.Response[v1.EvaluationResponse], error) {
	return c.evaluate.CallUnary(ctx, req)
}

// SyntheticGeneration calls eval.v1.EvaluationService.SyntheticGeneration.
func (c *evaluationServiceClient) SyntheticGeneration(ctx context.Context, req *connect.Request[v1.SyntheticGenerationRequest]) (*connect.Response[v1.EvaluationResponse], error) {
	return c.syntheticGeneration.CallUnary(ctx, req)
}

// CreateWorkspace calls eval.v1.EvaluationService.CreateWorkspace.
func (c *evaluationServiceClient) CreateWorkspace(ctx context.Context, req *connect.Request[v1.CreateWorkspaceRequest]) (*connect.Response[v1.CreateWorkspaceResponse], error) {
	return c.createWorkspace.CallUnary(ctx, req)
}

// GetWorkspace calls eval.v1.EvaluationService.GetWorkspace.
func (c *evaluationServiceClient) GetWorkspace(ctx context.Context, req *connect.Request[v1.GetWorkspaceRequest]) (*connect.Response[v1.GetWorkspaceResponse], error) {
	return c.getWorkspace.CallUnary(ctx, req)
}

// ListWorkspaces calls eval.v1.EvaluationService.ListWorkspaces.
func (c *evaluationServiceClient) ListWorkspaces(ctx context.Context, req *connect.Request[v1.ListWorkspacesRequest]) (*connect.Response[v1.ListWorkspacesResponse], error) {
	return c.listWorkspaces.CallUnary(ctx, req)
}

// UpdateWorkspace calls eval.v1.EvaluationService.UpdateWorkspace.
func (c *evaluationServiceClient) UpdateWorkspace(ctx context.Context, req *connect.Request[v1.UpdateWorkspaceRequest]) (*connect.Response[v1.UpdateWorkspaceResponse], error) {
	return c.updateWorkspace.CallUnary(ctx, req)
}

// GeneratePrompt calls eval.v1.EvaluationService.GeneratePrompt.
func (c *evaluationServiceClient) GeneratePrompt(ctx context.Context, req *connect.Request[v1.GeneratePromptRequest]) (*connect.Response[v1.GeneratePromptResponse], error) {
	return c.generatePrompt.CallUnary(ctx, req)
}

// CreateTestCase calls eval.v1.EvaluationService.CreateTestCase.
func (c *evaluationServiceClient) CreateTestCase(ctx context.Context, req *connect.Request[v1.CreateTestCaseRequest]) (*connect.Response[v1.CreateTestCaseResponse], error) {
	return c.createTestCase.CallUnary(ctx, req)
}

// ListTestCases calls eval.v1.EvaluationService.ListTestCases.
func (c *evaluationServiceClient) ListTestCases(ctx context.Context, req *connect.Request[v1.ListTestCasesRequest]) (*connect.Response[v1.ListTestCasesResponse], error) {
	return c.listTestCases.CallUnary(ctx, req)
}

// GenerateTestCase calls eval.v1.EvaluationService.GenerateTestCase.
func (c *evaluationServiceClient) GenerateTestCase(ctx context.Context, req *connect.Request[v1.GenerateTestCaseRequest]) (*connect.Response[v1.GenerateTestCaseResponse], error) {
	return c.generateTestCase.CallUnary(ctx, req)
}

// DeleteTestCase calls eval.v1.EvaluationService.DeleteTestCase.
func (c *evaluationServiceClient) DeleteTestCase(ctx context.Context, req *connect.Request[v1.DeleteTestCaseRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteTestCase.CallUnary(ctx, req)
}

// ListModelConfigs calls eval.v1.EvaluationService.ListModelConfigs.
func (c *evaluationServiceClient) ListModelConfigs(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListModelConfigsResponse], error) {
	return c.listModelConfigs.CallUnary(ctx, req)
}

// GetDefaultSmallModelConfig calls eval.v1.EvaluationService.GetDefaultSmallModelConfig.
func (c *evaluationServiceClient) GetDefaultSmallModelConfig(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetModelConfigResponse], error) {
	return c.getDefaultSmallModelConfig.CallUnary(ctx, req)
}

// GetDefaultLargeModelConfig calls eval.v1.EvaluationService.GetDefaultLargeModelConfig.
func (c *evaluationServiceClient) GetDefaultLargeModelConfig(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetModelConfigResponse], error) {
	return c.getDefaultLargeModelConfig.CallUnary(ctx, req)
}

// SetDefaultSmallModelConfig calls eval.v1.EvaluationService.SetDefaultSmallModelConfig.
func (c *evaluationServiceClient) SetDefaultSmallModelConfig(ctx context.Context, req *connect.Request[v1.SetDefaultSmallModelConfigRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.setDefaultSmallModelConfig.CallUnary(ctx, req)
}

// SetDefaultLargeModelConfig calls eval.v1.EvaluationService.SetDefaultLargeModelConfig.
func (c *evaluationServiceClient) SetDefaultLargeModelConfig(ctx context.Context, req *connect.Request[v1.SetDefaultLargeModelConfigRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.setDefaultLargeModelConfig.CallUnary(ctx, req)
}

// CreateWorkspaceConfig calls eval.v1.EvaluationService.CreateWorkspaceConfig.
func (c *evaluationServiceClient) CreateWorkspaceConfig(ctx context.Context, req *connect.Request[v1.CreateWorkspaceConfigRequest]) (*connect.Response[v1.CreateWorkspaceConfigResponse], error) {
	return c.createWorkspaceConfig.CallUnary(ctx, req)
}

// DeleteWorkspaceConfig calls eval.v1.EvaluationService.DeleteWorkspaceConfig.
func (c *evaluationServiceClient) DeleteWorkspaceConfig(ctx context.Context, req *connect.Request[v1.DeleteWorkspaceConfigRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteWorkspaceConfig.CallUnary(ctx, req)
}

// SetWorkspaceConfigActive calls eval.v1.EvaluationService.SetWorkspaceConfigActive.
func (c *evaluationServiceClient) SetWorkspaceConfigActive(ctx context.Context, req *connect.Request[v1.SetWorkspaceConfigActiveRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.setWorkspaceConfigActive.CallUnary(ctx, req)
}

// SetVersionActive calls eval.v1.EvaluationService.SetVersionActive.
func (c *evaluationServiceClient) SetVersionActive(ctx context.Context, req *connect.Request[v1.SetVersionActiveRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.setVersionActive.CallUnary(ctx, req)
}

// SetXMLMode calls eval.v1.EvaluationService.SetXMLMode.
func (c *evaluationServiceClient) SetXMLMode(ctx context.Context, req *connect.Request[v1.SetXMLModeRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.setXMLMode.CallUnary(ctx, req)
}

// RateTestResult calls eval.v1.EvaluationService.RateTestResult.
func (c *evaluationServiceClient) RateTestResult(ctx context.Context, req *connect.Request[v1.RateTestResultRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.rateTestResult.CallUnary(ctx, req)
}

// EvaluationServiceHandler is an implementation of the eval.v1.EvaluationService service.
type EvaluationServiceHandler interface {
	Evaluate(context.Context, *connect.Request[v1.EvaluationRequest]) (*connect.Response[v1.EvaluationResponse], error)
	SyntheticGeneration(context.Context, *connect.Request[v1.SyntheticGenerationRequest]) (*connect.Response[v1.EvaluationResponse], error)
	// Workspace operations
	CreateWorkspace(context.Context, *connect.Request[v1.CreateWorkspaceRequest]) (*connect.Response[v1.CreateWorkspaceResponse], error)
	GetWorkspace(context.Context, *connect.Request[v1.GetWorkspaceRequest]) (*connect.Response[v1.GetWorkspaceResponse], error)
	ListWorkspaces(context.Context, *connect.Request[v1.ListWorkspacesRequest]) (*connect.Response[v1.ListWorkspacesResponse], error)
	UpdateWorkspace(context.Context, *connect.Request[v1.UpdateWorkspaceRequest]) (*connect.Response[v1.UpdateWorkspaceResponse], error)
	// Prompt operations
	GeneratePrompt(context.Context, *connect.Request[v1.GeneratePromptRequest]) (*connect.Response[v1.GeneratePromptResponse], error)
	// TestCase operations
	CreateTestCase(context.Context, *connect.Request[v1.CreateTestCaseRequest]) (*connect.Response[v1.CreateTestCaseResponse], error)
	ListTestCases(context.Context, *connect.Request[v1.ListTestCasesRequest]) (*connect.Response[v1.ListTestCasesResponse], error)
	GenerateTestCase(context.Context, *connect.Request[v1.GenerateTestCaseRequest]) (*connect.Response[v1.GenerateTestCaseResponse], error)
	DeleteTestCase(context.Context, *connect.Request[v1.DeleteTestCaseRequest]) (*connect.Response[emptypb.Empty], error)
	// ModelConfig operations
	ListModelConfigs(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListModelConfigsResponse], error)
	GetDefaultSmallModelConfig(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetModelConfigResponse], error)
	GetDefaultLargeModelConfig(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetModelConfigResponse], error)
	SetDefaultSmallModelConfig(context.Context, *connect.Request[v1.SetDefaultSmallModelConfigRequest]) (*connect.Response[emptypb.Empty], error)
	SetDefaultLargeModelConfig(context.Context, *connect.Request[v1.SetDefaultLargeModelConfigRequest]) (*connect.Response[emptypb.Empty], error)
	CreateWorkspaceConfig(context.Context, *connect.Request[v1.CreateWorkspaceConfigRequest]) (*connect.Response[v1.CreateWorkspaceConfigResponse], error)
	DeleteWorkspaceConfig(context.Context, *connect.Request[v1.DeleteWorkspaceConfigRequest]) (*connect.Response[emptypb.Empty], error)
	SetWorkspaceConfigActive(context.Context, *connect.Request[v1.SetWorkspaceConfigActiveRequest]) (*connect.Response[emptypb.Empty], error)
	SetVersionActive(context.Context, *connect.Request[v1.SetVersionActiveRequest]) (*connect.Response[emptypb.Empty], error)
	SetXMLMode(context.Context, *connect.Request[v1.SetXMLModeRequest]) (*connect.Response[emptypb.Empty], error)
	RateTestResult(context.Context, *connect.Request[v1.RateTestResultRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewEvaluationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEvaluationServiceHandler(svc EvaluationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	evaluationServiceEvaluateHandler := connect.NewUnaryHandler(
		EvaluationServiceEvaluateProcedure,
		svc.Evaluate,
		connect.WithSchema(evaluationServiceEvaluateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationServiceSyntheticGenerationHandler := connect.NewUnaryHandler(
		EvaluationServiceSyntheticGenerationProcedure,
		svc.SyntheticGeneration,
		connect.WithSchema(evaluationServiceSyntheticGenerationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationServiceCreateWorkspaceHandler := connect.NewUnaryHandler(
		EvaluationServiceCreateWorkspaceProcedure,
		svc.CreateWorkspace,
		connect.WithSchema(evaluationServiceCreateWorkspaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationServiceGetWorkspaceHandler := connect.NewUnaryHandler(
		EvaluationServiceGetWorkspaceProcedure,
		svc.GetWorkspace,
		connect.WithSchema(evaluationServiceGetWorkspaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationServiceListWorkspacesHandler := connect.NewUnaryHandler(
		EvaluationServiceListWorkspacesProcedure,
		svc.ListWorkspaces,
		connect.WithSchema(evaluationServiceListWorkspacesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationServiceUpdateWorkspaceHandler := connect.NewUnaryHandler(
		EvaluationServiceUpdateWorkspaceProcedure,
		svc.UpdateWorkspace,
		connect.WithSchema(evaluationServiceUpdateWorkspaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationServiceGeneratePromptHandler := connect.NewUnaryHandler(
		EvaluationServiceGeneratePromptProcedure,
		svc.GeneratePrompt,
		connect.WithSchema(evaluationServiceGeneratePromptMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationServiceCreateTestCaseHandler := connect.NewUnaryHandler(
		EvaluationServiceCreateTestCaseProcedure,
		svc.CreateTestCase,
		connect.WithSchema(evaluationServiceCreateTestCaseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationServiceListTestCasesHandler := connect.NewUnaryHandler(
		EvaluationServiceListTestCasesProcedure,
		svc.ListTestCases,
		connect.WithSchema(evaluationServiceListTestCasesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationServiceGenerateTestCaseHandler := connect.NewUnaryHandler(
		EvaluationServiceGenerateTestCaseProcedure,
		svc.GenerateTestCase,
		connect.WithSchema(evaluationServiceGenerateTestCaseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationServiceDeleteTestCaseHandler := connect.NewUnaryHandler(
		EvaluationServiceDeleteTestCaseProcedure,
		svc.DeleteTestCase,
		connect.WithSchema(evaluationServiceDeleteTestCaseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationServiceListModelConfigsHandler := connect.NewUnaryHandler(
		EvaluationServiceListModelConfigsProcedure,
		svc.ListModelConfigs,
		connect.WithSchema(evaluationServiceListModelConfigsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationServiceGetDefaultSmallModelConfigHandler := connect.NewUnaryHandler(
		EvaluationServiceGetDefaultSmallModelConfigProcedure,
		svc.GetDefaultSmallModelConfig,
		connect.WithSchema(evaluationServiceGetDefaultSmallModelConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationServiceGetDefaultLargeModelConfigHandler := connect.NewUnaryHandler(
		EvaluationServiceGetDefaultLargeModelConfigProcedure,
		svc.GetDefaultLargeModelConfig,
		connect.WithSchema(evaluationServiceGetDefaultLargeModelConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationServiceSetDefaultSmallModelConfigHandler := connect.NewUnaryHandler(
		EvaluationServiceSetDefaultSmallModelConfigProcedure,
		svc.SetDefaultSmallModelConfig,
		connect.WithSchema(evaluationServiceSetDefaultSmallModelConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationServiceSetDefaultLargeModelConfigHandler := connect.NewUnaryHandler(
		EvaluationServiceSetDefaultLargeModelConfigProcedure,
		svc.SetDefaultLargeModelConfig,
		connect.WithSchema(evaluationServiceSetDefaultLargeModelConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationServiceCreateWorkspaceConfigHandler := connect.NewUnaryHandler(
		EvaluationServiceCreateWorkspaceConfigProcedure,
		svc.CreateWorkspaceConfig,
		connect.WithSchema(evaluationServiceCreateWorkspaceConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationServiceDeleteWorkspaceConfigHandler := connect.NewUnaryHandler(
		EvaluationServiceDeleteWorkspaceConfigProcedure,
		svc.DeleteWorkspaceConfig,
		connect.WithSchema(evaluationServiceDeleteWorkspaceConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationServiceSetWorkspaceConfigActiveHandler := connect.NewUnaryHandler(
		EvaluationServiceSetWorkspaceConfigActiveProcedure,
		svc.SetWorkspaceConfigActive,
		connect.WithSchema(evaluationServiceSetWorkspaceConfigActiveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationServiceSetVersionActiveHandler := connect.NewUnaryHandler(
		EvaluationServiceSetVersionActiveProcedure,
		svc.SetVersionActive,
		connect.WithSchema(evaluationServiceSetVersionActiveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationServiceSetXMLModeHandler := connect.NewUnaryHandler(
		EvaluationServiceSetXMLModeProcedure,
		svc.SetXMLMode,
		connect.WithSchema(evaluationServiceSetXMLModeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationServiceRateTestResultHandler := connect.NewUnaryHandler(
		EvaluationServiceRateTestResultProcedure,
		svc.RateTestResult,
		connect.WithSchema(evaluationServiceRateTestResultMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/eval.v1.EvaluationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EvaluationServiceEvaluateProcedure:
			evaluationServiceEvaluateHandler.ServeHTTP(w, r)
		case EvaluationServiceSyntheticGenerationProcedure:
			evaluationServiceSyntheticGenerationHandler.ServeHTTP(w, r)
		case EvaluationServiceCreateWorkspaceProcedure:
			evaluationServiceCreateWorkspaceHandler.ServeHTTP(w, r)
		case EvaluationServiceGetWorkspaceProcedure:
			evaluationServiceGetWorkspaceHandler.ServeHTTP(w, r)
		case EvaluationServiceListWorkspacesProcedure:
			evaluationServiceListWorkspacesHandler.ServeHTTP(w, r)
		case EvaluationServiceUpdateWorkspaceProcedure:
			evaluationServiceUpdateWorkspaceHandler.ServeHTTP(w, r)
		case EvaluationServiceGeneratePromptProcedure:
			evaluationServiceGeneratePromptHandler.ServeHTTP(w, r)
		case EvaluationServiceCreateTestCaseProcedure:
			evaluationServiceCreateTestCaseHandler.ServeHTTP(w, r)
		case EvaluationServiceListTestCasesProcedure:
			evaluationServiceListTestCasesHandler.ServeHTTP(w, r)
		case EvaluationServiceGenerateTestCaseProcedure:
			evaluationServiceGenerateTestCaseHandler.ServeHTTP(w, r)
		case EvaluationServiceDeleteTestCaseProcedure:
			evaluationServiceDeleteTestCaseHandler.ServeHTTP(w, r)
		case EvaluationServiceListModelConfigsProcedure:
			evaluationServiceListModelConfigsHandler.ServeHTTP(w, r)
		case EvaluationServiceGetDefaultSmallModelConfigProcedure:
			evaluationServiceGetDefaultSmallModelConfigHandler.ServeHTTP(w, r)
		case EvaluationServiceGetDefaultLargeModelConfigProcedure:
			evaluationServiceGetDefaultLargeModelConfigHandler.ServeHTTP(w, r)
		case EvaluationServiceSetDefaultSmallModelConfigProcedure:
			evaluationServiceSetDefaultSmallModelConfigHandler.ServeHTTP(w, r)
		case EvaluationServiceSetDefaultLargeModelConfigProcedure:
			evaluationServiceSetDefaultLargeModelConfigHandler.ServeHTTP(w, r)
		case EvaluationServiceCreateWorkspaceConfigProcedure:
			evaluationServiceCreateWorkspaceConfigHandler.ServeHTTP(w, r)
		case EvaluationServiceDeleteWorkspaceConfigProcedure:
			evaluationServiceDeleteWorkspaceConfigHandler.ServeHTTP(w, r)
		case EvaluationServiceSetWorkspaceConfigActiveProcedure:
			evaluationServiceSetWorkspaceConfigActiveHandler.ServeHTTP(w, r)
		case EvaluationServiceSetVersionActiveProcedure:
			evaluationServiceSetVersionActiveHandler.ServeHTTP(w, r)
		case EvaluationServiceSetXMLModeProcedure:
			evaluationServiceSetXMLModeHandler.ServeHTTP(w, r)
		case EvaluationServiceRateTestResultProcedure:
			evaluationServiceRateTestResultHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEvaluationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEvaluationServiceHandler struct{}

func (UnimplementedEvaluationServiceHandler) Evaluate(context.Context, *connect.Request[v1.EvaluationRequest]) (*connect.Response[v1.EvaluationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eval.v1.EvaluationService.Evaluate is not implemented"))
}

func (UnimplementedEvaluationServiceHandler) SyntheticGeneration(context.Context, *connect.Request[v1.SyntheticGenerationRequest]) (*connect.Response[v1.EvaluationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eval.v1.EvaluationService.SyntheticGeneration is not implemented"))
}

func (UnimplementedEvaluationServiceHandler) CreateWorkspace(context.Context, *connect.Request[v1.CreateWorkspaceRequest]) (*connect.Response[v1.CreateWorkspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eval.v1.EvaluationService.CreateWorkspace is not implemented"))
}

func (UnimplementedEvaluationServiceHandler) GetWorkspace(context.Context, *connect.Request[v1.GetWorkspaceRequest]) (*connect.Response[v1.GetWorkspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eval.v1.EvaluationService.GetWorkspace is not implemented"))
}

func (UnimplementedEvaluationServiceHandler) ListWorkspaces(context.Context, *connect.Request[v1.ListWorkspacesRequest]) (*connect.Response[v1.ListWorkspacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eval.v1.EvaluationService.ListWorkspaces is not implemented"))
}

func (UnimplementedEvaluationServiceHandler) UpdateWorkspace(context.Context, *connect.Request[v1.UpdateWorkspaceRequest]) (*connect.Response[v1.UpdateWorkspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eval.v1.EvaluationService.UpdateWorkspace is not implemented"))
}

func (UnimplementedEvaluationServiceHandler) GeneratePrompt(context.Context, *connect.Request[v1.GeneratePromptRequest]) (*connect.Response[v1.GeneratePromptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eval.v1.EvaluationService.GeneratePrompt is not implemented"))
}

func (UnimplementedEvaluationServiceHandler) CreateTestCase(context.Context, *connect.Request[v1.CreateTestCaseRequest]) (*connect.Response[v1.CreateTestCaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eval.v1.EvaluationService.CreateTestCase is not implemented"))
}

func (UnimplementedEvaluationServiceHandler) ListTestCases(context.Context, *connect.Request[v1.ListTestCasesRequest]) (*connect.Response[v1.ListTestCasesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eval.v1.EvaluationService.ListTestCases is not implemented"))
}

func (UnimplementedEvaluationServiceHandler) GenerateTestCase(context.Context, *connect.Request[v1.GenerateTestCaseRequest]) (*connect.Response[v1.GenerateTestCaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eval.v1.EvaluationService.GenerateTestCase is not implemented"))
}

func (UnimplementedEvaluationServiceHandler) DeleteTestCase(context.Context, *connect.Request[v1.DeleteTestCaseRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eval.v1.EvaluationService.DeleteTestCase is not implemented"))
}

func (UnimplementedEvaluationServiceHandler) ListModelConfigs(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListModelConfigsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eval.v1.EvaluationService.ListModelConfigs is not implemented"))
}

func (UnimplementedEvaluationServiceHandler) GetDefaultSmallModelConfig(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetModelConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eval.v1.EvaluationService.GetDefaultSmallModelConfig is not implemented"))
}

func (UnimplementedEvaluationServiceHandler) GetDefaultLargeModelConfig(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetModelConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eval.v1.EvaluationService.GetDefaultLargeModelConfig is not implemented"))
}

func (UnimplementedEvaluationServiceHandler) SetDefaultSmallModelConfig(context.Context, *connect.Request[v1.SetDefaultSmallModelConfigRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eval.v1.EvaluationService.SetDefaultSmallModelConfig is not implemented"))
}

func (UnimplementedEvaluationServiceHandler) SetDefaultLargeModelConfig(context.Context, *connect.Request[v1.SetDefaultLargeModelConfigRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eval.v1.EvaluationService.SetDefaultLargeModelConfig is not implemented"))
}

func (UnimplementedEvaluationServiceHandler) CreateWorkspaceConfig(context.Context, *connect.Request[v1.CreateWorkspaceConfigRequest]) (*connect.Response[v1.CreateWorkspaceConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eval.v1.EvaluationService.CreateWorkspaceConfig is not implemented"))
}

func (UnimplementedEvaluationServiceHandler) DeleteWorkspaceConfig(context.Context, *connect.Request[v1.DeleteWorkspaceConfigRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eval.v1.EvaluationService.DeleteWorkspaceConfig is not implemented"))
}

func (UnimplementedEvaluationServiceHandler) SetWorkspaceConfigActive(context.Context, *connect.Request[v1.SetWorkspaceConfigActiveRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eval.v1.EvaluationService.SetWorkspaceConfigActive is not implemented"))
}

func (UnimplementedEvaluationServiceHandler) SetVersionActive(context.Context, *connect.Request[v1.SetVersionActiveRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eval.v1.EvaluationService.SetVersionActive is not implemented"))
}

func (UnimplementedEvaluationServiceHandler) SetXMLMode(context.Context, *connect.Request[v1.SetXMLModeRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eval.v1.EvaluationService.SetXMLMode is not implemented"))
}

func (UnimplementedEvaluationServiceHandler) RateTestResult(context.Context, *connect.Request[v1.RateTestResultRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eval.v1.EvaluationService.RateTestResult is not implemented"))
}
