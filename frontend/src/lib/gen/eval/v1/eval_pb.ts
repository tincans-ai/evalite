// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file eval/v1/eval.proto (package eval.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum eval.v1.VariableType
 */
export enum VariableType {
  /**
   * @generated from enum value: TEXT = 0;
   */
  TEXT = 0,

  /**
   * TODO: add audio, video, etc.
   *
   * @generated from enum value: IMAGE = 1;
   */
  IMAGE = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(VariableType)
proto3.util.setEnumType(VariableType, "eval.v1.VariableType", [
  { no: 0, name: "TEXT" },
  { no: 1, name: "IMAGE" },
]);

/**
 * @generated from message eval.v1.Variable
 */
export class Variable extends Message<Variable> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: eval.v1.VariableType type = 2;
   */
  type = VariableType.TEXT;

  constructor(data?: PartialMessage<Variable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.Variable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(VariableType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Variable {
    return new Variable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Variable {
    return new Variable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Variable {
    return new Variable().fromJsonString(jsonString, options);
  }

  static equals(a: Variable | PlainMessage<Variable> | undefined, b: Variable | PlainMessage<Variable> | undefined): boolean {
    return proto3.util.equals(Variable, a, b);
  }
}

/**
 * @generated from message eval.v1.VariableValue
 */
export class VariableValue extends Message<VariableValue> {
  /**
   * @generated from oneof eval.v1.VariableValue.value
   */
  value: {
    /**
     * @generated from field: string text_value = 1;
     */
    value: string;
    case: "textValue";
  } | {
    /**
     * @generated from field: bytes image_value = 2;
     */
    value: Uint8Array;
    case: "imageValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<VariableValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.VariableValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text_value", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 2, name: "image_value", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VariableValue {
    return new VariableValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VariableValue {
    return new VariableValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VariableValue {
    return new VariableValue().fromJsonString(jsonString, options);
  }

  static equals(a: VariableValue | PlainMessage<VariableValue> | undefined, b: VariableValue | PlainMessage<VariableValue> | undefined): boolean {
    return proto3.util.equals(VariableValue, a, b);
  }
}

/**
 * @generated from message eval.v1.ModelConfig
 */
export class ModelConfig extends Message<ModelConfig> {
  /**
   * @generated from field: string provider_type = 1;
   */
  providerType = "";

  /**
   * @generated from field: string model_name = 2;
   */
  modelName = "";

  /**
   * @generated from field: string base_url = 3;
   */
  baseUrl = "";

  constructor(data?: PartialMessage<ModelConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.ModelConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "model_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "base_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelConfig {
    return new ModelConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelConfig {
    return new ModelConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelConfig {
    return new ModelConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ModelConfig | PlainMessage<ModelConfig> | undefined, b: ModelConfig | PlainMessage<ModelConfig> | undefined): boolean {
    return proto3.util.equals(ModelConfig, a, b);
  }
}

/**
 * @generated from message eval.v1.MessageOptions
 */
export class MessageOptions extends Message<MessageOptions> {
  /**
   * @generated from field: int32 max_tokens = 1;
   */
  maxTokens = 0;

  /**
   * @generated from field: float temperature = 2;
   */
  temperature = 0;

  constructor(data?: PartialMessage<MessageOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.MessageOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "max_tokens", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "temperature", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageOptions {
    return new MessageOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageOptions {
    return new MessageOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageOptions {
    return new MessageOptions().fromJsonString(jsonString, options);
  }

  static equals(a: MessageOptions | PlainMessage<MessageOptions> | undefined, b: MessageOptions | PlainMessage<MessageOptions> | undefined): boolean {
    return proto3.util.equals(MessageOptions, a, b);
  }
}

/**
 * @generated from message eval.v1.InferMessage
 */
export class InferMessage extends Message<InferMessage> {
  /**
   * @generated from field: string content = 1;
   */
  content = "";

  /**
   * @generated from field: string role = 2;
   */
  role = "";

  /**
   * @generated from field: bytes image = 3;
   */
  image = new Uint8Array(0);

  /**
   * @generated from field: bool should_cache = 4;
   */
  shouldCache = false;

  constructor(data?: PartialMessage<InferMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.InferMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "image", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "should_cache", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InferMessage {
    return new InferMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InferMessage {
    return new InferMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InferMessage {
    return new InferMessage().fromJsonString(jsonString, options);
  }

  static equals(a: InferMessage | PlainMessage<InferMessage> | undefined, b: InferMessage | PlainMessage<InferMessage> | undefined): boolean {
    return proto3.util.equals(InferMessage, a, b);
  }
}

/**
 * @generated from message eval.v1.InferRequest
 */
export class InferRequest extends Message<InferRequest> {
  /**
   * @generated from field: string request_id = 1;
   */
  requestId = "";

  /**
   * @generated from field: repeated eval.v1.InferMessage messages = 2;
   */
  messages: InferMessage[] = [];

  /**
   * @generated from field: eval.v1.ModelConfig model_config = 3;
   */
  modelConfig?: ModelConfig;

  /**
   * @generated from field: eval.v1.MessageOptions message_options = 4;
   */
  messageOptions?: MessageOptions;

  constructor(data?: PartialMessage<InferRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.InferRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "messages", kind: "message", T: InferMessage, repeated: true },
    { no: 3, name: "model_config", kind: "message", T: ModelConfig },
    { no: 4, name: "message_options", kind: "message", T: MessageOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InferRequest {
    return new InferRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InferRequest {
    return new InferRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InferRequest {
    return new InferRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InferRequest | PlainMessage<InferRequest> | undefined, b: InferRequest | PlainMessage<InferRequest> | undefined): boolean {
    return proto3.util.equals(InferRequest, a, b);
  }
}

/**
 * @generated from message eval.v1.EvaluationRequest
 */
export class EvaluationRequest extends Message<EvaluationRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  /**
   * @generated from field: eval.v1.TestCase test_case = 2;
   */
  testCase?: TestCase;

  /**
   * @generated from field: uint32 version_number = 3;
   */
  versionNumber = 0;

  constructor(data?: PartialMessage<EvaluationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.EvaluationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "test_case", kind: "message", T: TestCase },
    { no: 3, name: "version_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvaluationRequest {
    return new EvaluationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvaluationRequest {
    return new EvaluationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvaluationRequest {
    return new EvaluationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EvaluationRequest | PlainMessage<EvaluationRequest> | undefined, b: EvaluationRequest | PlainMessage<EvaluationRequest> | undefined): boolean {
    return proto3.util.equals(EvaluationRequest, a, b);
  }
}

/**
 * @generated from message eval.v1.EvaluationResponse
 */
export class EvaluationResponse extends Message<EvaluationResponse> {
  /**
   * @generated from field: repeated eval.v1.TestResult result = 1;
   */
  result: TestResult[] = [];

  constructor(data?: PartialMessage<EvaluationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.EvaluationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: TestResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvaluationResponse {
    return new EvaluationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvaluationResponse {
    return new EvaluationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvaluationResponse {
    return new EvaluationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EvaluationResponse | PlainMessage<EvaluationResponse> | undefined, b: EvaluationResponse | PlainMessage<EvaluationResponse> | undefined): boolean {
    return proto3.util.equals(EvaluationResponse, a, b);
  }
}

/**
 * @generated from message eval.v1.WorkspaceConfig
 */
export class WorkspaceConfig extends Message<WorkspaceConfig> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string model_config_name = 3;
   */
  modelConfigName = "";

  /**
   * @generated from field: eval.v1.MessageOptions message_options = 4;
   */
  messageOptions?: MessageOptions;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 6;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: bool active = 7;
   */
  active = false;

  constructor(data?: PartialMessage<WorkspaceConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.WorkspaceConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "model_config_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "message_options", kind: "message", T: MessageOptions },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
    { no: 6, name: "updated_at", kind: "message", T: Timestamp },
    { no: 7, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceConfig {
    return new WorkspaceConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceConfig {
    return new WorkspaceConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceConfig {
    return new WorkspaceConfig().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceConfig | PlainMessage<WorkspaceConfig> | undefined, b: WorkspaceConfig | PlainMessage<WorkspaceConfig> | undefined): boolean {
    return proto3.util.equals(WorkspaceConfig, a, b);
  }
}

/**
 * @generated from message eval.v1.CreateWorkspaceConfigRequest
 */
export class CreateWorkspaceConfigRequest extends Message<CreateWorkspaceConfigRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string model_config_name = 3;
   */
  modelConfigName = "";

  /**
   * @generated from field: eval.v1.MessageOptions message_options = 4;
   */
  messageOptions?: MessageOptions;

  constructor(data?: PartialMessage<CreateWorkspaceConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.CreateWorkspaceConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "model_config_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "message_options", kind: "message", T: MessageOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWorkspaceConfigRequest {
    return new CreateWorkspaceConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWorkspaceConfigRequest {
    return new CreateWorkspaceConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWorkspaceConfigRequest {
    return new CreateWorkspaceConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateWorkspaceConfigRequest | PlainMessage<CreateWorkspaceConfigRequest> | undefined, b: CreateWorkspaceConfigRequest | PlainMessage<CreateWorkspaceConfigRequest> | undefined): boolean {
    return proto3.util.equals(CreateWorkspaceConfigRequest, a, b);
  }
}

/**
 * @generated from message eval.v1.CreateWorkspaceConfigResponse
 */
export class CreateWorkspaceConfigResponse extends Message<CreateWorkspaceConfigResponse> {
  /**
   * @generated from field: eval.v1.WorkspaceConfig workspace_config = 1;
   */
  workspaceConfig?: WorkspaceConfig;

  constructor(data?: PartialMessage<CreateWorkspaceConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.CreateWorkspaceConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_config", kind: "message", T: WorkspaceConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWorkspaceConfigResponse {
    return new CreateWorkspaceConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWorkspaceConfigResponse {
    return new CreateWorkspaceConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWorkspaceConfigResponse {
    return new CreateWorkspaceConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateWorkspaceConfigResponse | PlainMessage<CreateWorkspaceConfigResponse> | undefined, b: CreateWorkspaceConfigResponse | PlainMessage<CreateWorkspaceConfigResponse> | undefined): boolean {
    return proto3.util.equals(CreateWorkspaceConfigResponse, a, b);
  }
}

/**
 * @generated from message eval.v1.Workspace
 */
export class Workspace extends Message<Workspace> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: repeated string model_config_names = 3;
   */
  modelConfigNames: string[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 5;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: repeated eval.v1.Workspace.Prompt prompts = 6;
   */
  prompts: Workspace_Prompt[] = [];

  /**
   * @generated from field: uint32 current_prompt_version_number = 7;
   */
  currentPromptVersionNumber = 0;

  /**
   * @generated from field: repeated eval.v1.WorkspaceConfig workspace_configs = 8;
   */
  workspaceConfigs: WorkspaceConfig[] = [];

  /**
   * @generated from field: repeated uint32 active_version_numbers = 9;
   */
  activeVersionNumbers: number[] = [];

  /**
   * @generated from field: bool XMLMode = 10;
   */
  XMLMode = false;

  constructor(data?: PartialMessage<Workspace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.Workspace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "model_config_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "created_at", kind: "message", T: Timestamp },
    { no: 5, name: "updated_at", kind: "message", T: Timestamp },
    { no: 6, name: "prompts", kind: "message", T: Workspace_Prompt, repeated: true },
    { no: 7, name: "current_prompt_version_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 8, name: "workspace_configs", kind: "message", T: WorkspaceConfig, repeated: true },
    { no: 9, name: "active_version_numbers", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
    { no: 10, name: "XMLMode", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Workspace {
    return new Workspace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Workspace {
    return new Workspace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Workspace {
    return new Workspace().fromJsonString(jsonString, options);
  }

  static equals(a: Workspace | PlainMessage<Workspace> | undefined, b: Workspace | PlainMessage<Workspace> | undefined): boolean {
    return proto3.util.equals(Workspace, a, b);
  }
}

/**
 * @generated from message eval.v1.Workspace.Prompt
 */
export class Workspace_Prompt extends Message<Workspace_Prompt> {
  /**
   * @generated from field: uint32 version_number = 1;
   */
  versionNumber = 0;

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  /**
   * @generated from field: repeated eval.v1.Variable variables = 3;
   */
  variables: Variable[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<Workspace_Prompt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.Workspace.Prompt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "variables", kind: "message", T: Variable, repeated: true },
    { no: 4, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Workspace_Prompt {
    return new Workspace_Prompt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Workspace_Prompt {
    return new Workspace_Prompt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Workspace_Prompt {
    return new Workspace_Prompt().fromJsonString(jsonString, options);
  }

  static equals(a: Workspace_Prompt | PlainMessage<Workspace_Prompt> | undefined, b: Workspace_Prompt | PlainMessage<Workspace_Prompt> | undefined): boolean {
    return proto3.util.equals(Workspace_Prompt, a, b);
  }
}

/**
 * @generated from message eval.v1.TestCase
 */
export class TestCase extends Message<TestCase> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string workspace_id = 2;
   */
  workspaceId = "";

  /**
   * @generated from field: map<string, eval.v1.VariableValue> variable_values = 3;
   */
  variableValues: { [key: string]: VariableValue } = {};

  /**
   * @generated from field: optional string response = 4;
   */
  response?: string;

  /**
   * @generated from field: bool has_been_evaluated = 5;
   */
  hasBeenEvaluated = false;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 7;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<TestCase>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.TestCase";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "variable_values", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: VariableValue} },
    { no: 4, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "has_been_evaluated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "created_at", kind: "message", T: Timestamp },
    { no: 7, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestCase {
    return new TestCase().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestCase {
    return new TestCase().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestCase {
    return new TestCase().fromJsonString(jsonString, options);
  }

  static equals(a: TestCase | PlainMessage<TestCase> | undefined, b: TestCase | PlainMessage<TestCase> | undefined): boolean {
    return proto3.util.equals(TestCase, a, b);
  }
}

/**
 * @generated from message eval.v1.TestResult
 */
export class TestResult extends Message<TestResult> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string test_case_id = 2;
   */
  testCaseId = "";

  /**
   * @generated from field: string response = 3;
   */
  response = "";

  /**
   * @generated from field: uint32 prompt_version_number = 4;
   */
  promptVersionNumber = 0;

  /**
   * @generated from field: string model_config_name = 5;
   */
  modelConfigName = "";

  /**
   * @generated from field: eval.v1.MessageOptions message_options = 6;
   */
  messageOptions?: MessageOptions;

  /**
   * @generated from field: string workspace_config_id = 7;
   */
  workspaceConfigId = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 8;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 9;
   */
  updatedAt?: Timestamp;

  /**
   * rating is -1 (thumbs down), 0 (unrated), or 1 (thumbs up)
   *
   * @generated from field: int32 rating = 10;
   */
  rating = 0;

  constructor(data?: PartialMessage<TestResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.TestResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "test_case_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "prompt_version_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "model_config_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "message_options", kind: "message", T: MessageOptions },
    { no: 7, name: "workspace_config_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "created_at", kind: "message", T: Timestamp },
    { no: 9, name: "updated_at", kind: "message", T: Timestamp },
    { no: 10, name: "rating", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestResult {
    return new TestResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestResult {
    return new TestResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestResult {
    return new TestResult().fromJsonString(jsonString, options);
  }

  static equals(a: TestResult | PlainMessage<TestResult> | undefined, b: TestResult | PlainMessage<TestResult> | undefined): boolean {
    return proto3.util.equals(TestResult, a, b);
  }
}

/**
 * CRUD operation messages
 *
 * @generated from message eval.v1.CreateWorkspaceRequest
 */
export class CreateWorkspaceRequest extends Message<CreateWorkspaceRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  constructor(data?: PartialMessage<CreateWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.CreateWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWorkspaceRequest {
    return new CreateWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWorkspaceRequest {
    return new CreateWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWorkspaceRequest {
    return new CreateWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateWorkspaceRequest | PlainMessage<CreateWorkspaceRequest> | undefined, b: CreateWorkspaceRequest | PlainMessage<CreateWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(CreateWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message eval.v1.GetWorkspaceRequest
 */
export class GetWorkspaceRequest extends Message<GetWorkspaceRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.GetWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceRequest {
    return new GetWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceRequest {
    return new GetWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceRequest {
    return new GetWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkspaceRequest | PlainMessage<GetWorkspaceRequest> | undefined, b: GetWorkspaceRequest | PlainMessage<GetWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(GetWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message eval.v1.ListWorkspacesRequest
 */
export class ListWorkspacesRequest extends Message<ListWorkspacesRequest> {
  /**
   * @generated from field: int32 page = 1;
   */
  page = 0;

  /**
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  constructor(data?: PartialMessage<ListWorkspacesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.ListWorkspacesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWorkspacesRequest {
    return new ListWorkspacesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWorkspacesRequest {
    return new ListWorkspacesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWorkspacesRequest {
    return new ListWorkspacesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListWorkspacesRequest | PlainMessage<ListWorkspacesRequest> | undefined, b: ListWorkspacesRequest | PlainMessage<ListWorkspacesRequest> | undefined): boolean {
    return proto3.util.equals(ListWorkspacesRequest, a, b);
  }
}

/**
 * @generated from message eval.v1.ListWorkspacesResponse
 */
export class ListWorkspacesResponse extends Message<ListWorkspacesResponse> {
  /**
   * @generated from field: repeated eval.v1.Workspace workspaces = 1;
   */
  workspaces: Workspace[] = [];

  /**
   * @generated from field: int32 total_count = 2;
   */
  totalCount = 0;

  constructor(data?: PartialMessage<ListWorkspacesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.ListWorkspacesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspaces", kind: "message", T: Workspace, repeated: true },
    { no: 2, name: "total_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWorkspacesResponse {
    return new ListWorkspacesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWorkspacesResponse {
    return new ListWorkspacesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWorkspacesResponse {
    return new ListWorkspacesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListWorkspacesResponse | PlainMessage<ListWorkspacesResponse> | undefined, b: ListWorkspacesResponse | PlainMessage<ListWorkspacesResponse> | undefined): boolean {
    return proto3.util.equals(ListWorkspacesResponse, a, b);
  }
}

/**
 * @generated from message eval.v1.GetPromptRequest
 */
export class GetPromptRequest extends Message<GetPromptRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetPromptRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.GetPromptRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPromptRequest {
    return new GetPromptRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPromptRequest {
    return new GetPromptRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPromptRequest {
    return new GetPromptRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPromptRequest | PlainMessage<GetPromptRequest> | undefined, b: GetPromptRequest | PlainMessage<GetPromptRequest> | undefined): boolean {
    return proto3.util.equals(GetPromptRequest, a, b);
  }
}

/**
 * @generated from message eval.v1.ListTestCasesRequest
 */
export class ListTestCasesRequest extends Message<ListTestCasesRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  /**
   * @generated from field: int32 page = 2;
   */
  page = 0;

  /**
   * @generated from field: int32 page_size = 3;
   */
  pageSize = 0;

  constructor(data?: PartialMessage<ListTestCasesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.ListTestCasesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTestCasesRequest {
    return new ListTestCasesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTestCasesRequest {
    return new ListTestCasesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTestCasesRequest {
    return new ListTestCasesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTestCasesRequest | PlainMessage<ListTestCasesRequest> | undefined, b: ListTestCasesRequest | PlainMessage<ListTestCasesRequest> | undefined): boolean {
    return proto3.util.equals(ListTestCasesRequest, a, b);
  }
}

/**
 * @generated from message eval.v1.ListTestCasesResponse
 */
export class ListTestCasesResponse extends Message<ListTestCasesResponse> {
  /**
   * @generated from field: repeated eval.v1.TestCase test_cases = 1;
   */
  testCases: TestCase[] = [];

  /**
   * @generated from field: int32 total_count = 2;
   */
  totalCount = 0;

  /**
   * @generated from field: repeated eval.v1.TestResult test_results = 3;
   */
  testResults: TestResult[] = [];

  constructor(data?: PartialMessage<ListTestCasesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.ListTestCasesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "test_cases", kind: "message", T: TestCase, repeated: true },
    { no: 2, name: "total_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "test_results", kind: "message", T: TestResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTestCasesResponse {
    return new ListTestCasesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTestCasesResponse {
    return new ListTestCasesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTestCasesResponse {
    return new ListTestCasesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTestCasesResponse | PlainMessage<ListTestCasesResponse> | undefined, b: ListTestCasesResponse | PlainMessage<ListTestCasesResponse> | undefined): boolean {
    return proto3.util.equals(ListTestCasesResponse, a, b);
  }
}

/**
 * @generated from message eval.v1.CreatePromptVersionRequest
 */
export class CreatePromptVersionRequest extends Message<CreatePromptVersionRequest> {
  /**
   * @generated from field: string prompt_id = 1;
   */
  promptId = "";

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  /**
   * @generated from field: uint32 version_number = 3;
   */
  versionNumber = 0;

  constructor(data?: PartialMessage<CreatePromptVersionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.CreatePromptVersionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prompt_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePromptVersionRequest {
    return new CreatePromptVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePromptVersionRequest {
    return new CreatePromptVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePromptVersionRequest {
    return new CreatePromptVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePromptVersionRequest | PlainMessage<CreatePromptVersionRequest> | undefined, b: CreatePromptVersionRequest | PlainMessage<CreatePromptVersionRequest> | undefined): boolean {
    return proto3.util.equals(CreatePromptVersionRequest, a, b);
  }
}

/**
 * @generated from message eval.v1.CreateWorkspaceResponse
 */
export class CreateWorkspaceResponse extends Message<CreateWorkspaceResponse> {
  /**
   * @generated from field: eval.v1.Workspace workspace = 1;
   */
  workspace?: Workspace;

  constructor(data?: PartialMessage<CreateWorkspaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.CreateWorkspaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace", kind: "message", T: Workspace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWorkspaceResponse {
    return new CreateWorkspaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWorkspaceResponse {
    return new CreateWorkspaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWorkspaceResponse {
    return new CreateWorkspaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateWorkspaceResponse | PlainMessage<CreateWorkspaceResponse> | undefined, b: CreateWorkspaceResponse | PlainMessage<CreateWorkspaceResponse> | undefined): boolean {
    return proto3.util.equals(CreateWorkspaceResponse, a, b);
  }
}

/**
 * @generated from message eval.v1.GetWorkspaceResponse
 */
export class GetWorkspaceResponse extends Message<GetWorkspaceResponse> {
  /**
   * @generated from field: eval.v1.Workspace workspace = 1;
   */
  workspace?: Workspace;

  constructor(data?: PartialMessage<GetWorkspaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.GetWorkspaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace", kind: "message", T: Workspace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceResponse {
    return new GetWorkspaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceResponse {
    return new GetWorkspaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceResponse {
    return new GetWorkspaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkspaceResponse | PlainMessage<GetWorkspaceResponse> | undefined, b: GetWorkspaceResponse | PlainMessage<GetWorkspaceResponse> | undefined): boolean {
    return proto3.util.equals(GetWorkspaceResponse, a, b);
  }
}

/**
 * @generated from message eval.v1.CreateTestCaseRequest
 */
export class CreateTestCaseRequest extends Message<CreateTestCaseRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  /**
   * @generated from field: map<string, eval.v1.VariableValue> variable_values = 2;
   */
  variableValues: { [key: string]: VariableValue } = {};

  constructor(data?: PartialMessage<CreateTestCaseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.CreateTestCaseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "variable_values", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: VariableValue} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTestCaseRequest {
    return new CreateTestCaseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTestCaseRequest {
    return new CreateTestCaseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTestCaseRequest {
    return new CreateTestCaseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTestCaseRequest | PlainMessage<CreateTestCaseRequest> | undefined, b: CreateTestCaseRequest | PlainMessage<CreateTestCaseRequest> | undefined): boolean {
    return proto3.util.equals(CreateTestCaseRequest, a, b);
  }
}

/**
 * @generated from message eval.v1.CreateTestCaseResponse
 */
export class CreateTestCaseResponse extends Message<CreateTestCaseResponse> {
  /**
   * @generated from field: eval.v1.TestCase test_case = 1;
   */
  testCase?: TestCase;

  constructor(data?: PartialMessage<CreateTestCaseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.CreateTestCaseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "test_case", kind: "message", T: TestCase },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTestCaseResponse {
    return new CreateTestCaseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTestCaseResponse {
    return new CreateTestCaseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTestCaseResponse {
    return new CreateTestCaseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTestCaseResponse | PlainMessage<CreateTestCaseResponse> | undefined, b: CreateTestCaseResponse | PlainMessage<CreateTestCaseResponse> | undefined): boolean {
    return proto3.util.equals(CreateTestCaseResponse, a, b);
  }
}

/**
 * @generated from message eval.v1.DeleteTestCaseRequest
 */
export class DeleteTestCaseRequest extends Message<DeleteTestCaseRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteTestCaseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.DeleteTestCaseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTestCaseRequest {
    return new DeleteTestCaseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTestCaseRequest {
    return new DeleteTestCaseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTestCaseRequest {
    return new DeleteTestCaseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTestCaseRequest | PlainMessage<DeleteTestCaseRequest> | undefined, b: DeleteTestCaseRequest | PlainMessage<DeleteTestCaseRequest> | undefined): boolean {
    return proto3.util.equals(DeleteTestCaseRequest, a, b);
  }
}

/**
 * GeneratePromptRequest uses LLM to generate a prompt
 *
 * @generated from message eval.v1.GeneratePromptRequest
 */
export class GeneratePromptRequest extends Message<GeneratePromptRequest> {
  /**
   * @generated from field: string prompt = 1;
   */
  prompt = "";

  /**
   * @generated from field: string model_config_name = 2;
   */
  modelConfigName = "";

  constructor(data?: PartialMessage<GeneratePromptRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.GeneratePromptRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prompt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "model_config_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneratePromptRequest {
    return new GeneratePromptRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneratePromptRequest {
    return new GeneratePromptRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneratePromptRequest {
    return new GeneratePromptRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GeneratePromptRequest | PlainMessage<GeneratePromptRequest> | undefined, b: GeneratePromptRequest | PlainMessage<GeneratePromptRequest> | undefined): boolean {
    return proto3.util.equals(GeneratePromptRequest, a, b);
  }
}

/**
 * @generated from message eval.v1.GeneratePromptResponse
 */
export class GeneratePromptResponse extends Message<GeneratePromptResponse> {
  /**
   * @generated from field: string generated_prompt = 1;
   */
  generatedPrompt = "";

  constructor(data?: PartialMessage<GeneratePromptResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.GeneratePromptResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "generated_prompt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneratePromptResponse {
    return new GeneratePromptResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneratePromptResponse {
    return new GeneratePromptResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneratePromptResponse {
    return new GeneratePromptResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GeneratePromptResponse | PlainMessage<GeneratePromptResponse> | undefined, b: GeneratePromptResponse | PlainMessage<GeneratePromptResponse> | undefined): boolean {
    return proto3.util.equals(GeneratePromptResponse, a, b);
  }
}

/**
 * @generated from message eval.v1.ListModelConfigsRequest
 */
export class ListModelConfigsRequest extends Message<ListModelConfigsRequest> {
  constructor(data?: PartialMessage<ListModelConfigsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.ListModelConfigsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListModelConfigsRequest {
    return new ListModelConfigsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListModelConfigsRequest {
    return new ListModelConfigsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListModelConfigsRequest {
    return new ListModelConfigsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListModelConfigsRequest | PlainMessage<ListModelConfigsRequest> | undefined, b: ListModelConfigsRequest | PlainMessage<ListModelConfigsRequest> | undefined): boolean {
    return proto3.util.equals(ListModelConfigsRequest, a, b);
  }
}

/**
 * @generated from message eval.v1.ListModelConfigsResponse
 */
export class ListModelConfigsResponse extends Message<ListModelConfigsResponse> {
  /**
   * @generated from field: map<string, eval.v1.ModelConfig> model_configs = 1;
   */
  modelConfigs: { [key: string]: ModelConfig } = {};

  constructor(data?: PartialMessage<ListModelConfigsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.ListModelConfigsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model_configs", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ModelConfig} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListModelConfigsResponse {
    return new ListModelConfigsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListModelConfigsResponse {
    return new ListModelConfigsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListModelConfigsResponse {
    return new ListModelConfigsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListModelConfigsResponse | PlainMessage<ListModelConfigsResponse> | undefined, b: ListModelConfigsResponse | PlainMessage<ListModelConfigsResponse> | undefined): boolean {
    return proto3.util.equals(ListModelConfigsResponse, a, b);
  }
}

/**
 * @generated from message eval.v1.SetDefaultSmallModelConfigRequest
 */
export class SetDefaultSmallModelConfigRequest extends Message<SetDefaultSmallModelConfigRequest> {
  /**
   * @generated from field: string model_config_name = 1;
   */
  modelConfigName = "";

  constructor(data?: PartialMessage<SetDefaultSmallModelConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.SetDefaultSmallModelConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model_config_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetDefaultSmallModelConfigRequest {
    return new SetDefaultSmallModelConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetDefaultSmallModelConfigRequest {
    return new SetDefaultSmallModelConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetDefaultSmallModelConfigRequest {
    return new SetDefaultSmallModelConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetDefaultSmallModelConfigRequest | PlainMessage<SetDefaultSmallModelConfigRequest> | undefined, b: SetDefaultSmallModelConfigRequest | PlainMessage<SetDefaultSmallModelConfigRequest> | undefined): boolean {
    return proto3.util.equals(SetDefaultSmallModelConfigRequest, a, b);
  }
}

/**
 * @generated from message eval.v1.SetDefaultLargeModelConfigRequest
 */
export class SetDefaultLargeModelConfigRequest extends Message<SetDefaultLargeModelConfigRequest> {
  /**
   * @generated from field: string model_config_name = 1;
   */
  modelConfigName = "";

  constructor(data?: PartialMessage<SetDefaultLargeModelConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.SetDefaultLargeModelConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model_config_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetDefaultLargeModelConfigRequest {
    return new SetDefaultLargeModelConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetDefaultLargeModelConfigRequest {
    return new SetDefaultLargeModelConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetDefaultLargeModelConfigRequest {
    return new SetDefaultLargeModelConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetDefaultLargeModelConfigRequest | PlainMessage<SetDefaultLargeModelConfigRequest> | undefined, b: SetDefaultLargeModelConfigRequest | PlainMessage<SetDefaultLargeModelConfigRequest> | undefined): boolean {
    return proto3.util.equals(SetDefaultLargeModelConfigRequest, a, b);
  }
}

/**
 * @generated from message eval.v1.GetModelConfigResponse
 */
export class GetModelConfigResponse extends Message<GetModelConfigResponse> {
  /**
   * @generated from field: eval.v1.ModelConfig model_config = 1;
   */
  modelConfig?: ModelConfig;

  /**
   * @generated from field: string model_config_name = 2;
   */
  modelConfigName = "";

  constructor(data?: PartialMessage<GetModelConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.GetModelConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model_config", kind: "message", T: ModelConfig },
    { no: 2, name: "model_config_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModelConfigResponse {
    return new GetModelConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModelConfigResponse {
    return new GetModelConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModelConfigResponse {
    return new GetModelConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetModelConfigResponse | PlainMessage<GetModelConfigResponse> | undefined, b: GetModelConfigResponse | PlainMessage<GetModelConfigResponse> | undefined): boolean {
    return proto3.util.equals(GetModelConfigResponse, a, b);
  }
}

/**
 * @generated from message eval.v1.UpdateWorkspaceRequest
 */
export class UpdateWorkspaceRequest extends Message<UpdateWorkspaceRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  /**
   * @generated from field: string new_content = 2;
   */
  newContent = "";

  /**
   * @generated from field: optional string new_title = 3;
   */
  newTitle?: string;

  constructor(data?: PartialMessage<UpdateWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.UpdateWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_title", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateWorkspaceRequest {
    return new UpdateWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateWorkspaceRequest {
    return new UpdateWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateWorkspaceRequest {
    return new UpdateWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateWorkspaceRequest | PlainMessage<UpdateWorkspaceRequest> | undefined, b: UpdateWorkspaceRequest | PlainMessage<UpdateWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(UpdateWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message eval.v1.UpdateWorkspaceResponse
 */
export class UpdateWorkspaceResponse extends Message<UpdateWorkspaceResponse> {
  /**
   * @generated from field: uint32 new_version_number = 1;
   */
  newVersionNumber = 0;

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 4;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<UpdateWorkspaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.UpdateWorkspaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "new_version_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateWorkspaceResponse {
    return new UpdateWorkspaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateWorkspaceResponse {
    return new UpdateWorkspaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateWorkspaceResponse {
    return new UpdateWorkspaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateWorkspaceResponse | PlainMessage<UpdateWorkspaceResponse> | undefined, b: UpdateWorkspaceResponse | PlainMessage<UpdateWorkspaceResponse> | undefined): boolean {
    return proto3.util.equals(UpdateWorkspaceResponse, a, b);
  }
}

/**
 * @generated from message eval.v1.GenerateTestCaseRequest
 */
export class GenerateTestCaseRequest extends Message<GenerateTestCaseRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  /**
   * @generated from field: uint32 version_number = 2;
   */
  versionNumber = 0;

  /**
   * @generated from field: repeated eval.v1.TestCase test_cases = 3;
   */
  testCases: TestCase[] = [];

  /**
   * @generated from field: optional string custom_cot = 4;
   */
  customCot?: string;

  constructor(data?: PartialMessage<GenerateTestCaseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.GenerateTestCaseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "test_cases", kind: "message", T: TestCase, repeated: true },
    { no: 4, name: "custom_cot", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateTestCaseRequest {
    return new GenerateTestCaseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateTestCaseRequest {
    return new GenerateTestCaseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateTestCaseRequest {
    return new GenerateTestCaseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateTestCaseRequest | PlainMessage<GenerateTestCaseRequest> | undefined, b: GenerateTestCaseRequest | PlainMessage<GenerateTestCaseRequest> | undefined): boolean {
    return proto3.util.equals(GenerateTestCaseRequest, a, b);
  }
}

/**
 * @generated from message eval.v1.GenerateTestCaseResponse
 */
export class GenerateTestCaseResponse extends Message<GenerateTestCaseResponse> {
  /**
   * @generated from field: eval.v1.TestCase test_case = 1;
   */
  testCase?: TestCase;

  constructor(data?: PartialMessage<GenerateTestCaseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.GenerateTestCaseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "test_case", kind: "message", T: TestCase },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateTestCaseResponse {
    return new GenerateTestCaseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateTestCaseResponse {
    return new GenerateTestCaseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateTestCaseResponse {
    return new GenerateTestCaseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateTestCaseResponse | PlainMessage<GenerateTestCaseResponse> | undefined, b: GenerateTestCaseResponse | PlainMessage<GenerateTestCaseResponse> | undefined): boolean {
    return proto3.util.equals(GenerateTestCaseResponse, a, b);
  }
}

/**
 * @generated from message eval.v1.DeleteWorkspaceConfigRequest
 */
export class DeleteWorkspaceConfigRequest extends Message<DeleteWorkspaceConfigRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  /**
   * @generated from field: string workspace_config_id = 2;
   */
  workspaceConfigId = "";

  constructor(data?: PartialMessage<DeleteWorkspaceConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.DeleteWorkspaceConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workspace_config_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteWorkspaceConfigRequest {
    return new DeleteWorkspaceConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteWorkspaceConfigRequest {
    return new DeleteWorkspaceConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteWorkspaceConfigRequest {
    return new DeleteWorkspaceConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteWorkspaceConfigRequest | PlainMessage<DeleteWorkspaceConfigRequest> | undefined, b: DeleteWorkspaceConfigRequest | PlainMessage<DeleteWorkspaceConfigRequest> | undefined): boolean {
    return proto3.util.equals(DeleteWorkspaceConfigRequest, a, b);
  }
}

/**
 * @generated from message eval.v1.SetWorkspaceConfigActiveRequest
 */
export class SetWorkspaceConfigActiveRequest extends Message<SetWorkspaceConfigActiveRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  /**
   * @generated from field: string workspace_config_id = 2;
   */
  workspaceConfigId = "";

  /**
   * @generated from field: bool active = 3;
   */
  active = false;

  constructor(data?: PartialMessage<SetWorkspaceConfigActiveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.SetWorkspaceConfigActiveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workspace_config_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetWorkspaceConfigActiveRequest {
    return new SetWorkspaceConfigActiveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetWorkspaceConfigActiveRequest {
    return new SetWorkspaceConfigActiveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetWorkspaceConfigActiveRequest {
    return new SetWorkspaceConfigActiveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetWorkspaceConfigActiveRequest | PlainMessage<SetWorkspaceConfigActiveRequest> | undefined, b: SetWorkspaceConfigActiveRequest | PlainMessage<SetWorkspaceConfigActiveRequest> | undefined): boolean {
    return proto3.util.equals(SetWorkspaceConfigActiveRequest, a, b);
  }
}

/**
 * @generated from message eval.v1.SetVersionActiveRequest
 */
export class SetVersionActiveRequest extends Message<SetVersionActiveRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  /**
   * @generated from field: uint32 version_number = 2;
   */
  versionNumber = 0;

  /**
   * @generated from field: bool active = 3;
   */
  active = false;

  constructor(data?: PartialMessage<SetVersionActiveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.SetVersionActiveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetVersionActiveRequest {
    return new SetVersionActiveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetVersionActiveRequest {
    return new SetVersionActiveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetVersionActiveRequest {
    return new SetVersionActiveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetVersionActiveRequest | PlainMessage<SetVersionActiveRequest> | undefined, b: SetVersionActiveRequest | PlainMessage<SetVersionActiveRequest> | undefined): boolean {
    return proto3.util.equals(SetVersionActiveRequest, a, b);
  }
}

/**
 * @generated from message eval.v1.SetXMLModeRequest
 */
export class SetXMLModeRequest extends Message<SetXMLModeRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  /**
   * @generated from field: bool XMLMode = 2;
   */
  XMLMode = false;

  constructor(data?: PartialMessage<SetXMLModeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.SetXMLModeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "XMLMode", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetXMLModeRequest {
    return new SetXMLModeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetXMLModeRequest {
    return new SetXMLModeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetXMLModeRequest {
    return new SetXMLModeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetXMLModeRequest | PlainMessage<SetXMLModeRequest> | undefined, b: SetXMLModeRequest | PlainMessage<SetXMLModeRequest> | undefined): boolean {
    return proto3.util.equals(SetXMLModeRequest, a, b);
  }
}

/**
 * @generated from message eval.v1.RateTestResultRequest
 */
export class RateTestResultRequest extends Message<RateTestResultRequest> {
  /**
   * @generated from field: string test_result_id = 1;
   */
  testResultId = "";

  /**
   * @generated from field: int32 rating = 2;
   */
  rating = 0;

  constructor(data?: PartialMessage<RateTestResultRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eval.v1.RateTestResultRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "test_result_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rating", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RateTestResultRequest {
    return new RateTestResultRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RateTestResultRequest {
    return new RateTestResultRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RateTestResultRequest {
    return new RateTestResultRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RateTestResultRequest | PlainMessage<RateTestResultRequest> | undefined, b: RateTestResultRequest | PlainMessage<RateTestResultRequest> | undefined): boolean {
    return proto3.util.equals(RateTestResultRequest, a, b);
  }
}

